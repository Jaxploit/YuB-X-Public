#pragma once

#include <Windows.h>
#include <lstate.h>
#include <lgc.h>

#include <Exploit/Utils.hpp>
#include <Exploit/Globals.hpp>
#include <Exploit/Execution/Execution.hpp>
#include <Exploit/TaskScheduler/TaskScheduler.hpp>

namespace Closures
{
    int loadstring(lua_State* L)
    {
        luaL_checktype(L, 1, LUA_TSTRING);

        std::string ChunkName = lua_isstring(L, 2) ? lua_tostring(L, 2) : "";
        std::string Bytecode = Execution::CompileScript(lua_tostring(L, 1));
        if (luau_load(L, ChunkName.c_str(), Bytecode.c_str(), Bytecode.length(), 0) != LUA_OK)
        {
            lua_pushnil(L);
            lua_pushvalue(L, -2);
            return 2;
        }

        Closure* Closure = clvalue(luaA_toobject(L, -1));
        TaskScheduler::SetProtoCapabilities(Closure->l.p, &MaxCapabilities);
        lua_setsafeenv(L, LUA_GLOBALSINDEX, false);

        return 1;
    }

    void RegisterLibrary(lua_State* L)
    {
        Utils::AddFunction(L, "loadstring", Closures::loadstring);
    }
}