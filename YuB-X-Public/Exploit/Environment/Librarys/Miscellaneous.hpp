#pragma once

#include <Windows.h>
#include <lstate.h>
#include <lgc.h>

#include <Exploit/Utils.hpp>
#include <Exploit/Globals.hpp>

namespace Miscellaneous
{
    int getgenv(lua_State* L)
    {
        if (SharedVariables::ExploitThread == L)
        {
            lua_pushvalue(L, LUA_GLOBALSINDEX);
            return 1;
        }

        lua_rawcheckstack(L, 1);
        luaC_threadbarrier(L);
        luaC_threadbarrier(SharedVariables::ExploitThread);
        lua_pushvalue(SharedVariables::ExploitThread, LUA_GLOBALSINDEX);
        lua_xmove(SharedVariables::ExploitThread, L, 1);

        return 1;
    }

    int identifyexecutor(lua_State* L)
    {
        lua_pushstring(L, "YuB-X-Public");
        lua_pushstring(L, "1.0.0");

        return 2;
    };

    int getexecutorname(lua_State* L)
    {
        lua_pushstring(L, "YuB-X-Public");

        return 1;
    };

    int getobjects(lua_State* L)
    {
        luaL_checktype(L, 1, LUA_TUSERDATA);
        luaL_checktype(L, 2, LUA_TSTRING);

        lua_getglobal(L, "game");
        lua_getfield(L, -1, "GetService");
        lua_pushvalue(L, -2);
        lua_pushstring(L, "InsertService");
        lua_call(L, 2, 1);
        lua_remove(L, -2);

        lua_getfield(L, -1, "LoadLocalAsset");

        lua_pushvalue(L, -2);
        lua_pushvalue(L, 2);
        lua_pcall(L, 2, 1, 0);

        if (lua_type(L, -1) == LUA_TSTRING) {
            luaL_error(L, lua_tostring(L, -1));
        }

        lua_createtable(L, 1, 0);
        lua_pushvalue(L, -2);
        lua_rawseti(L, -2, 1);

        lua_remove(L, -3);
        lua_remove(L, -2);

        return 1;
    }

	void RegisterLibrary(lua_State* L)
	{
        Utils::AddFunction(L, "getgenv", Miscellaneous::getgenv);
        Utils::AddFunction(L, "identifyexecutor", Miscellaneous::identifyexecutor);
        Utils::AddFunction(L, "getexecutorname", Miscellaneous::getexecutorname);
	}
}