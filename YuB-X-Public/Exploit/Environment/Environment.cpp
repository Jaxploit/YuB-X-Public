#include <Exploit/Environment/Environment.hpp>
#include <Exploit/Environment/Librarys/Http.hpp>
#include <Exploit/Environment/Librarys/Closures.hpp>
#include <Exploit/Environment/Librarys/Miscellaneous.hpp>

lua_CFunction OriginalIndex;
lua_CFunction OriginalNamecall;

std::vector<const char*> UnsafeFunction = {
    "TestService.Run", "TestService", "Run",
    "OpenVideosFolder", "OpenScreenshotsFolder", "GetRobuxBalance", "PerformPurchase",
    "PromptBundlePurchase", "PromptNativePurchase", "PromptProductPurchase", "PromptPurchase",
    "PromptThirdPartyPurchase", "Publish", "GetMessageId", "OpenBrowserWindow", "RequestInternal",
    "ExecuteJavaScript", "ToggleRecording", "TakeScreenshot", "HttpRequestAsync", "GetLast",
    "SendCommand", "GetAsync", "GetAsyncFullUrl", "RequestAsync", "MakeRequest",
    "AddCoreScriptLocal", "SaveScriptProfilingData", "GetUserSubscriptionDetailsInternalAsync",
    "GetUserSubscriptionStatusAsync", "PerformBulkPurchase", "PerformCancelSubscription",
    "PerformPurchaseV2", "PerformSubscriptionPurchase", "PerformSubscriptionPurchaseV2",
    "PrepareCollectiblesPurchase", "PromptBulkPurchase", "PromptCancelSubscription",
    "PromptCollectiblesPurchase", "PromptGamePassPurchase", "PromptNativePurchaseWithLocalPlayer",
    "PromptPremiumPurchase", "PromptRobloxPurchase", "PromptSubscriptionPurchase",
    "ReportAbuse", "ReportAbuseV3", "ReturnToJavaScript", "OpenNativeOverlay",
    "OpenWeChatAuthWindow", "EmitHybridEvent", "OpenUrl", "PostAsync", "PostAsyncFullUrl",
    "RequestLimitedAsync", "Load", "CaptureScreenshot", "CreatePostAsync", "DeleteCapture",
    "DeleteCapturesAsync", "GetCaptureFilePathAsync", "SaveCaptureToExternalStorage",
    "SaveCapturesToExternalStorageAsync", "GetCaptureUploadDataAsync", "RetrieveCaptures",
    "SaveScreenshotCapture", "Call", "GetProtocolMethodRequestMessageId",
    "GetProtocolMethodResponseMessageId", "PublishProtocolMethodRequest",
    "PublishProtocolMethodResponse", "Subscribe", "SubscribeToProtocolMethodRequest",
    "SubscribeToProtocolMethodResponse", "GetDeviceIntegrityToken", "GetDeviceIntegrityTokenYield",
    "NoPromptCreateOutfit", "NoPromptDeleteOutfit", "NoPromptRenameOutfit", "NoPromptSaveAvatar",
    "NoPromptSaveAvatarThumbnailCustomization", "NoPromptSetFavorite", "NoPromptUpdateOutfit",
    "PerformCreateOutfitWithDescription", "PerformRenameOutfit", "PerformSaveAvatarWithDescription",
    "PerformSetFavorite", "PerformUpdateOutfit", "PromptCreateOutfit", "PromptDeleteOutfit",
    "PromptRenameOutfit", "PromptSaveAvatar", "PromptSetFavorite", "PromptUpdateOutfit"
};

int IndexHook(lua_State* L)
{
    if (L->userdata->Capabilities == MaxCapabilities)
    {
        std::string Key = lua_isstring(L, 2) ? lua_tostring(L, 2) : "";
        for (const char* Function : UnsafeFunction)
        {
            if (Key == Function)
            {
                luaL_error(L, "Function '%s' has been disabled for security reasons", Function);
                return 0;
            }
        }

        if (L->userdata->Script.expired())
        {
            if (Key == "HttpGet" || Key == "HttpGetAsync")
            {
                lua_pushcclosure(L, Http::HttpGet, nullptr, 0);
                return 1;
            }
            else if (Key == "GetObjects")
            {
                lua_pushcclosure(L, Miscellaneous::getobjects, nullptr, 0);
                return 1;
            }
        }
    }

    return OriginalIndex(L);
};

int NamecallHook(lua_State* L)
{
    if (L->userdata->Capabilities == MaxCapabilities)
    {
        std::string Key = L->namecall->data;
        for (const char* Function : UnsafeFunction)
        {
            if (Key == Function)
            {
                luaL_error(L, "Function '%s' has been disabled for security reasons", Function);
                return 0;
            }
        }

        if (L->userdata->Script.expired())
        {
            if (Key == "HttpGet" || Key == "HttpGetAsync")
            {
                return Http::HttpGet(L);
            }
            else if (Key == "GetObjects")
            {
                return Miscellaneous::getobjects(L);
            }
        }
    }

    return OriginalNamecall(L);
};

void InitializeHooks(lua_State* L)
{
    int OriginalTop = lua_gettop(L);

    lua_getglobal(L, "game");
    luaL_getmetafield(L, -1, "__index");
    if (lua_type(L, -1) == LUA_TFUNCTION || lua_type(L, -1) == LUA_TLIGHTUSERDATA)
    {
        Closure* ClosureIndex = clvalue(luaA_toobject(L, -1));
        OriginalIndex = ClosureIndex->c.f;
        ClosureIndex->c.f = IndexHook;
    }
    lua_pop(L, 1);

    luaL_getmetafield(L, -1, "__namecall");
    if (lua_type(L, -1) == LUA_TFUNCTION || lua_type(L, -1) == LUA_TLIGHTUSERDATA)
    {
        Closure* NamecallClosure = clvalue(luaA_toobject(L, -1));
        OriginalNamecall = NamecallClosure->c.f;
        NamecallClosure->c.f = NamecallHook;
    }
    lua_pop(L, 1);

    lua_settop(L, OriginalTop);
}

void Environment::SetupEnvironment(lua_State* L)
{
    Closures::RegisterLibrary(L);
    Http::RegisterLibrary(L);
    Miscellaneous::RegisterLibrary(L);

	lua_newtable(L);
	lua_setglobal(L, "_G");

	lua_newtable(L);
	lua_setglobal(L, "shared");

    InitializeHooks(L);
}